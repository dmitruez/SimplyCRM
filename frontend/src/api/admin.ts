import { notificationBus } from '../components/notifications/notificationBus';
import {
  AdminActivityRecord,
  AdminOverview,
  AdminPlanDistribution,
  AdminPlanOption,
  AdminPlanRequest,
  AdminUserRecord
} from '../types/admin';

const delay = (ms = 160) => new Promise((resolve) => setTimeout(resolve, ms));

const formatCurrency = (value: number) =>
  new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', maximumFractionDigits: 0 }).format(value);

const planPalette = {
  free: '#dbeafe',
  pro: '#bfdbfe',
  enterprise: '#c7d2fe',
  ultimate: '#e9d5ff'
} as const;

const planOptions: AdminPlanOption[] = [
  {
    key: 'free',
    name: 'Free',
    pricePerSeat: 0,
    description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SimplyCRM.',
    highlightColor: planPalette.free,
    features: ['1 —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', 'CRM-–≤–æ—Ä–æ–Ω–∫–∞ –¥–æ 3 —Å—Ç–∞–¥–∏–π', '–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π 30 –¥–Ω–µ–π']
  },
  {
    key: 'pro',
    name: 'Pro',
    pricePerSeat: 2490,
    description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –∫–æ–º–∞–Ω–¥.',
    highlightColor: planPalette.pro,
    recommended: true,
    badge: '–•–∏—Ç',
    features: ['–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–∫–ª–∞–¥', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ—Ç—á—ë—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–µ–±—Ö—É–∫–∏']
  },
  {
    key: 'enterprise',
    name: 'Enterprise',
    pricePerSeat: 5490,
    description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ SLA, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.',
    highlightColor: planPalette.enterprise,
    features: ['–ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ ML-–∏–Ω—Å–∞–π—Ç—ã', '–ì–∏–±–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤', '–†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–∞']
  },
  {
    key: 'ultimate',
    name: 'Ultimate',
    pricePerSeat: 7990,
    description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ MLOps.',
    highlightColor: planPalette.ultimate,
    badge: 'VIP',
    features: ['–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7', '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∞—É–¥–∏—Ç']
  }
];

let userRecords: AdminUserRecord[] = [
  {
    id: 1,
    fullName: '–ê–Ω–Ω–∞ –ö–∞—Ä–ø–æ–≤–∞',
    email: 'anna@aether.dev',
    organization: 'Aether Technologies',
    planKey: 'enterprise',
    planName: 'Enterprise',
    status: 'active',
    seatsUsed: 38,
    seatsTotal: 45,
    monthlySpend: 210000,
    healthScore: 92,
    usageTrend: 14,
    lastActive: '2024-05-09T09:24:00Z',
    avatarColor: '#2563eb',
    tags: ['AI', 'Global']
  },
  {
    id: 2,
    fullName: '–ú–∞–∫—Å–∏–º –û—Ä–ª–æ–≤',
    email: 'max@novus.ai',
    organization: 'Novus AI Labs',
    planKey: 'pro',
    planName: 'Pro',
    status: 'trialing',
    seatsUsed: 12,
    seatsTotal: 15,
    monthlySpend: 78000,
    healthScore: 81,
    usageTrend: 6,
    lastActive: '2024-05-09T11:02:00Z',
    avatarColor: '#f97316',
    tags: ['Startup']
  },
  {
    id: 3,
    fullName: '–î–∞—Ä—å—è –°–æ–∫–æ–ª–æ–≤–∞',
    email: 'daria@aurora.global',
    organization: 'Aurora Logistics',
    planKey: 'ultimate',
    planName: 'Ultimate',
    status: 'active',
    seatsUsed: 64,
    seatsTotal: 80,
    monthlySpend: 480000,
    healthScore: 88,
    usageTrend: 11,
    lastActive: '2024-05-08T20:48:00Z',
    avatarColor: '#a855f7',
    tags: ['Enterprise', 'Logistics']
  },
  {
    id: 4,
    fullName: '–ò–ª—å—è –ó–∞—Ö–∞—Ä–æ–≤',
    email: 'ilya@northwind.io',
    organization: 'Northwind Retail',
    planKey: 'pro',
    planName: 'Pro',
    status: 'active',
    seatsUsed: 25,
    seatsTotal: 30,
    monthlySpend: 162000,
    healthScore: 76,
    usageTrend: -3,
    lastActive: '2024-05-09T06:12:00Z',
    avatarColor: '#0ea5e9',
    tags: ['Retail']
  },
  {
    id: 5,
    fullName: '–û–ª—å–≥–∞ –õ–µ–±–µ–¥–µ–≤–∞',
    email: 'olga@seedstudio.io',
    organization: 'Seed Studio',
    planKey: 'free',
    planName: 'Free',
    status: 'invited',
    seatsUsed: 3,
    seatsTotal: 5,
    monthlySpend: 0,
    healthScore: 64,
    usageTrend: 9,
    lastActive: '2024-05-05T14:35:00Z',
    avatarColor: '#16a34a',
    tags: ['Design', 'Incubator']
  }
];

let planRequests: AdminPlanRequest[] = [
  {
    id: 301,
    organization: 'Mercury Fintech',
    contactName: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –§—Ä–æ–ª–æ–≤–∞',
    contactEmail: 'kate@mercury.finance',
    currentPlan: 'Pro',
    requestedPlan: 'Enterprise',
    message: '–ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ SSO –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SLA –Ω–∞ 99,9% uptime.',
    submittedAt: '2024-05-08T17:20:00Z',
    priority: 'high',
    status: 'new'
  },
  {
    id: 302,
    organization: 'Atlas Manufacturing',
    contactName: '–†–æ–º–∞–Ω –°–º–∏—Ä–Ω–æ–≤',
    contactEmail: 'roman@atlasmfg.co',
    currentPlan: 'Pro',
    requestedPlan: 'Ultimate',
    message: '–ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å 4 —Ñ–∏–ª–∏–∞–ª–∞ –≤ –µ–¥–∏–Ω–æ–π CRM, –Ω—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π onboarding.',
    submittedAt: '2024-05-07T09:45:00Z',
    priority: 'medium',
    status: 'contacted'
  },
  {
    id: 303,
    organization: 'Velocity Commerce',
    contactName: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ë–µ–ª–æ–≤–∞',
    contactEmail: 'svetlana@velocity.store',
    currentPlan: 'Free',
    requestedPlan: 'Pro',
    message: '–•–æ—Ç–∏–º –æ—Ç–∫—Ä—ã—Ç—å –æ–ø–ª–∞—Ç—É –æ–Ω–ª–∞–π–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤.',
    submittedAt: '2024-05-06T13:10:00Z',
    priority: 'low',
    status: 'new'
  }
];

const activityLog: AdminActivityRecord[] = [
  {
    id: 501,
    timestamp: '2024-05-09T09:12:00Z',
    actor: '–ê–Ω–Ω–∞ –ö–∞—Ä–ø–æ–≤–∞',
    action: '–Ω–∞–∑–Ω–∞—á–∏–ª–∞ —Ç–∞—Ä–∏—Ñ',
    target: 'Novus AI Labs',
    tone: 'success',
    icon: '‚ú®',
    description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ Enterprise c 30 –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏.'
  },
  {
    id: 502,
    timestamp: '2024-05-09T08:40:00Z',
    actor: '–°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞',
    action: '–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞ –æ–ø–ª–∞—Ç—É',
    target: 'Northwind Retail',
    tone: 'info',
    icon: 'üí≥',
    description: '–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂ –∑–∞ 25 –ª–∏—Ü–µ–Ω–∑–∏–π Pro.'
  },
  {
    id: 503,
    timestamp: '2024-05-08T18:05:00Z',
    actor: '–ú–∞–∫—Å–∏–º –û—Ä–ª–æ–≤',
    action: '–∑–∞–ø—Ä–æ—Å–∏–ª –∞–ø–≥—Ä–µ–π–¥',
    target: 'Novus AI Labs',
    tone: 'warning',
    icon: 'üì©',
    description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.'
  }
];

const clone = <T,>(payload: T): T => JSON.parse(JSON.stringify(payload));

const computePlanDistribution = (): AdminPlanDistribution[] => {
  const totals: Record<string, { seats: number; totalSeats: number }> = {};
  userRecords.forEach((user) => {
    if (!totals[user.planKey]) {
      totals[user.planKey] = { seats: 0, totalSeats: 0 };
    }
    totals[user.planKey].seats += user.seatsUsed;
    totals[user.planKey].totalSeats += user.seatsTotal;
  });

  const distribution = Object.entries(totals).map(([planKey, value]) => {
    const plan = planOptions.find((item) => item.key === planKey);
    return {
      planKey,
      planName: plan?.name ?? planKey,
      percentage: value.totalSeats === 0 ? 0 : Math.min(100, Math.round((value.seats / value.totalSeats) * 100)),
      seatsUsed: value.seats,
      seatsTotal: value.totalSeats,
      color: plan?.highlightColor ?? '#e0e7ff'
    };
  });

  return distribution.sort((a, b) => b.seatsUsed - a.seatsUsed);
};

const computeOverview = (): AdminOverview => {
  const mrr = userRecords.reduce((acc, user) => acc + user.monthlySpend, 0);
  const activeUsers = userRecords.filter((user) => user.status === 'active').length;
  const enterpriseShare = Math.round(
    (userRecords.filter((user) => user.planKey === 'enterprise' || user.planKey === 'ultimate').length / userRecords.length) *
      100
  );
  return {
    metrics: [
      { id: 'mrr', label: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (MRR)', value: formatCurrency(mrr), delta: 8.4, deltaLabel: '–∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É', trend: 'up' },
      { id: 'active-users', label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π', value: `${activeUsers}`, delta: 4.1, deltaLabel: '–Ω–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é', trend: 'up' },
      { id: 'enterprise-share', label: 'Enterprise –¥–æ–ª—è', value: `${enterpriseShare}%`, delta: 1.6, deltaLabel: '–≤ —Ä–æ—Å—Ç–µ –¥–æ–ª–∏', trend: 'up' },
      { id: 'nps', label: 'NPS', value: '67', delta: 3.2, deltaLabel: '–∑–∞ –∫–≤–∞—Ä—Ç–∞–ª', trend: 'up' }
    ],
    planDistribution: computePlanDistribution(),
    revenueTrend: [
      { label: '–Ø–Ω–≤', value: mrr * 0.68 },
      { label: '–§–µ–≤', value: mrr * 0.72 },
      { label: '–ú–∞—Ä', value: mrr * 0.83 },
      { label: '–ê–ø—Ä', value: mrr * 0.92 },
      { label: '–ú–∞–π', value: mrr }
    ],
    satisfactionScore: 4.6,
    retentionRate: 93,
    nps: 67
  };
};

const resolvePlanName = (planKey: string) => planOptions.find((plan) => plan.key === planKey)?.name ?? planKey;

export const adminApi = {
  async getOverview(): Promise<AdminOverview> {
    await delay();
    return clone(computeOverview());
  },

  async listUsers(): Promise<AdminUserRecord[]> {
    await delay();
    return clone(userRecords);
  },

  async listPlans(): Promise<AdminPlanOption[]> {
    await delay();
    return clone(planOptions);
  },

  async assignPlan(payload: { userId: number; planKey: string }): Promise<AdminUserRecord> {
    await delay();
    const planName = resolvePlanName(payload.planKey);
    userRecords = userRecords.map((user) =>
      user.id === payload.userId
        ? {
            ...user,
            planKey: payload.planKey,
            planName,
            monthlySpend: Math.round(planOptions.find((plan) => plan.key === payload.planKey)?.pricePerSeat ?? 0) * user.seatsUsed,
            status: user.status === 'invited' ? 'active' : user.status,
            tags: Array.from(new Set([...user.tags, planName]))
          }
        : user
    );

    const updatedUser = userRecords.find((user) => user.id === payload.userId);
    if (!updatedUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    notificationBus.publish({
      type: 'success',
      title: '–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω',
      message: `${updatedUser.organization} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –ø–ª–∞–Ω ${planName}`
    });

    return clone(updatedUser);
  },

  async revokePlan(userId: number): Promise<AdminUserRecord> {
    await delay();
    userRecords = userRecords.map((user) =>
      user.id === userId
        ? {
            ...user,
            planKey: 'free',
            planName: 'Free',
            monthlySpend: 0,
            status: 'trialing'
          }
        : user
    );

    const updatedUser = userRecords.find((user) => user.id === userId);
    if (!updatedUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    notificationBus.publish({
      type: 'info',
      title: '–¢–∞—Ä–∏—Ñ —Å–Ω—è—Ç',
      message: `${updatedUser.organization} –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ Free –ø–ª–∞–Ω`
    });

    return clone(updatedUser);
  },

  async listPlanRequests(): Promise<AdminPlanRequest[]> {
    await delay();
    return clone(planRequests);
  },

  async respondToRequest(payload: { requestId: number; status: 'approved' | 'rejected' | 'contacted' }): Promise<AdminPlanRequest> {
    await delay();
    planRequests = planRequests.map((request) =>
      request.id === payload.requestId
        ? {
            ...request,
            status: payload.status
          }
        : request
    );

    const updated = planRequests.find((request) => request.id === payload.requestId);
    if (!updated) {
      throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const actionMap: Record<typeof payload.status, { title: string; message: string; type: 'success' | 'warning' | 'info' }> = {
      approved: {
        title: '–ó–∞–ø—Ä–æ—Å —É—Ç–≤–µ—Ä–∂–¥—ë–Ω',
        message: `${updated.organization} –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω—É ${updated.requestedPlan}`,
        type: 'success'
      },
      rejected: {
        title: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω',
        message: `${updated.organization}: –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π`,
        type: 'warning'
      },
      contacted: {
        title: '–°–≤—è–∑–∞–ª–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
        message: `${updated.organization}: –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è`,
        type: 'info'
      }
    };

    notificationBus.publish(actionMap[payload.status]);

    return clone(updated);
  },

  async listActivity(): Promise<AdminActivityRecord[]> {
    await delay();
    return clone(activityLog);
  }
};
